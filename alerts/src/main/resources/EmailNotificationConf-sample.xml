<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- The more specific criteria will override the more general one -->
<!-- If there are any conflict, for example, app1's default recipient is 1, level1's default recipient is 2, 
  When receive message( app=1, level=1 ), both the recipient 1 and 2 should receive email.
  Basically, app1's default recipient is 1 means receipt 1 care all the message from app1, no matter what level it is -->
<!-- merge policy specify how to handle when both admin configured and client application send same field. the policy could be:
appOnly( use app, if app is empty, result is empty), configOnly, combine, appOverConfig(if both are not empty, use app; else use the none empty one), configOverApp
The merge policy in the entity is the default merge policy, the merge policy in criteria could overwrite the default merge policy.
The default merge policy for all entities are "configOverApp" -->  


<conf>
  <emailContext>
    <id>gmail</id>
    <smtpServer>smtp.gmail.com</smtpServer>
    <smtpPort>587</smtpPort>  
    <sender>datatorrent.alerts@gmail.com</sender>
    <password>password</password>
    <enableTls>true</enableTls>
    <mergePolicy>configOnly</mergePolicy>
  </emailContext>

  <emailContext>
    <id>mailserver2</id>
    <smtpServer>server2</smtpServer>
    <smtpPort>25</smtpPort>
    <sender>sender2</sender>
    <password>password2</password>
    <enableTls>true</enableTls>
  </emailContext>

  <emailRecipient>
    <id>alladmin</id>
    <to>to1</to>
    <to>to2</to>
    <cc>cc1</cc>
    <cc>cc2</cc>
    <bcc>bcc1</bcc>
    <bcc>bcc2</bcc>
    <mergePolicy>combine</mergePolicy>
  </emailRecipient>

  <emailRecipient>
    <id>others</id>
    <to>to1</to>
    <to>to2</to>
    <cc>cc1</cc>
    <cc>cc2</cc>
    <bcc>bcc1</bcc>
    <bcc>bcc2</bcc>
  </emailRecipient>

  <emailContent>
    <id>simplenotify</id>
    <subject>subject1</subject>
    <body>body1</body>
    <mergePolicy>appOnly</mergePolicy>
  </emailContent>

  <emailContent>
    <id>2</id>
    <subject>subject2</subject>
    <body>body2</body>
  </emailContent>

  <!-- for each criteria, only one ref to emailContext and emailContent, but support multiple ref to emailRecipient.
  and each emailRecipientRef support different merge policy -->
  <criteria>
    <emailContextRef mergePolicy="configOnly">gmail</emailContextRef>
    <emailRecipientRef mergePolicy="configOnly">alladmin</emailRecipientRef>
    <emailRecipientRef mergePolicy="appOverConf">others</emailRecipientRef>
    <emailContentRef mergePolicy="appOverConf">simplenotify</emailContentRef>
  </criteria>

  <criteria>
    <app>app1</app>
    <emailRecipientRef>others</emailRecipientRef>
  </criteria>

  <criteria>
    <level>1</level>
    <emailRecipientRef>others</emailRecipientRef>
  </criteria>

  <criteria>
    <app>app1</app>
    <app>app2</app>
    <level>1</level>
    <level>2</level>
    <emailRecipientRef>alladmin</emailRecipientRef>
  </criteria>
</conf>